<?php


/**
 * @file
 * maestro_inline_form_api_task.module
 *
 * includes all the logic necessary for the inline form api task for maestro.
 * this file is composed in four main sections: drupal hooks, maestro hooks,
 * the maestro engine class, and the maestro admin interface class.
 */


include_once './' . drupal_get_path('module', 'maestro') . '/maestro_tasks.class.php';
include_once './' . drupal_get_path('module', 'maestro') . '/maestro_task_interface.class.php';

function maestro_inline_form_api_task_theme() {
  return array(
    'maestro_task_inline_form_api' => array(
      'template' => 'theme/maestro-task-inline-form-api',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_inline_form_api_edit' => array(
      'template' => 'theme/maestro-task-inline-form-api-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
  );
}

function maestro_inline_form_api_task_maestro_get_taskobject_info() {
  $options = array(
    array('display_name' => t('Inline Form API Task'),
      'class_name' => 'MaestroTaskInterfaceInlineFormAPI'
    ),
  );
  return $options;
}


function maestro_inline_form_api_task_form($form, &$form_state, $dynamic_form) {
  return $dynamic_form;
}

function maestro_inline_form_api_task_form_submit($form, &$form_state) {
  $qid = $form['queue_id']['#value'];
  $op = ($form['complete']['#value'] == $_POST['op']) ? 'complete' : 'save';

  if ($qid > 0) {
    $query = db_select('maestro_queue');
    $query->fields('maestro_queue', array('task_class_name', 'process_id'));
    $query->condition('id', $qid, '=');
    $rec = $query->execute()->fetchObject();
    $tasktype = $rec->task_class_name;

    $data = new stdClass();
    // Need to pass in data object when instantiating task class and queueid needs to be set in class _properties.
    $data->process_id = $rec->process_id;
    $data->queue_id = $qid;
    $task = new $tasktype($data);
    $ret = $task->processInteractiveTask($qid, $op);

    if ($ret->retcode === TRUE) {
      if ($ret->engineop == 'complete') {
        if (!isset($ret->status)) {
          $ret->status = 1;    // Just in case interactive function has not set this - set to default 'success'
        }
        $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
        $maestro->engine()->completeTask($qid, $ret->status);
      }
    }
  }
}


/**
 * Maestro Hooks
 */

function maestro_inline_form_api_task_maestro_set_process_variable_methods() {
  return array(
    'maestro_inline_form_api_task' => array (
      'title' => t('Inline Form API Task Field Result'),
      'engine_handler' => 'maestro_inline_form_api_task_maestro_set_process_variable_logic'
    ),
  );
}

function maestro_inline_form_api_task_maestro_set_process_variable_logic(&$task_class, $current_value, $arg) {
  $args = explode(':', $arg);  //$args[0] = content type, $arg[1] = field name
  $query = db_select('maestro_process', 'a');
  $query->fields('a', array('tracking_id'));
  $query->condition('a.id', $task_class->_properties->process_id, '=');
  $tracking_id = $query->execute()->fetchField();

  $data = $task_class->getProjectData($tracking_id, $args[0]);

  return $data[$args[1]];
}


/**
 * Maestro Engine Class
 */

class MaestroTaskTypeInlineFormAPI extends MaestroTask {

  function execute() {
    $this->setRunOnceFlag($this->_properties->id);
    $this->completionStatus = FALSE;
    $this->executionStatus = TRUE;
    return $this;
  }

  function prepareTask() {
    $serializedData = db_query("SELECT task_data FROM {maestro_template_data} WHERE id = :tid",
    array(':tid' => $this->_properties->taskid))->fetchField();
    $taskdata = @unserialize($serializedData);

    return array('form_api_code' => $taskdata['form_api_code'], 'serialized_data' => $serializedData);
  }

  function showInteractiveTask() {
    $retval = '';
    $serializedData = db_query("SELECT task_data FROM {maestro_queue} WHERE id = :id",
    array(':id' => $this->_properties->queue_id))->fetchField();
    $taskdata = @unserialize($serializedData);

    $form = array();

    eval($taskdata['form_api_code']);
    $tracking_id = db_select('maestro_process')
      ->fields('maestro_process', array('tracking_id'))
      ->condition('id', $this->_properties->process_id, '=')
      ->execute()->fetchField();
    $default_data = $this->getProjectData($tracking_id, $taskdata['content_type']);

    if ($default_data !== FALSE) {
      $this->updateDefaultFormData($form, $default_data);
    }

    $form['queue_id'] = array(
      '#type' => 'hidden',
      '#default_value' => $this->_properties->queue_id,
    );
    $form['taskop'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
    );
    $form['save'] = array(
      '#type'           => 'submit',
      '#default_value'  => t('Save'),
    );
    $form['complete'] = array(
      '#type'           => 'submit',
      '#default_value'  => t('Complete Task'),
    );

    $form['#submit'][] = 'maestro_inline_form_api_task_form_submit';

    return drupal_render(drupal_get_form('maestro_inline_form_api_task_form', $form));
  }

  function updateDefaultFormData(&$form, &$data, $parent='') {
    $value_handled = FALSE;
    foreach ($form as $key => $val) {
      if ($key[0] == '#') {
        if ($parent != '') {
          if ($form['#type'] != 'fieldset') {
            if (!$value_handled) {
              $form['#default_value'] = $data;
              $value_handled = TRUE;
            }
          }
        }
      }
      else {  //recurse into the next level
        $this->updateDefaultFormData($form[$key], $data[$key], $key);
      }
    }
  }

  function processInteractiveTask($taskid, $taskop) {
    $ret = new stdClass();
    $ret->retcode = TRUE;
    $ret->engineop = $taskop;

    $serializedData = db_query("SELECT task_data FROM {maestro_queue} WHERE id = :id", array(':id' => $taskid))->fetchField();
    $taskdata = @unserialize($serializedData);

    $tracking_id = db_select('maestro_process')
      ->fields('maestro_process', array('tracking_id'))
      ->condition('id', $this->_properties->process_id, '=')
      ->execute()->fetchField();

    $this->saveProjectData($_POST, $tracking_id, $taskdata['content_type']);

    return $ret;
  }

}


/**
 * Maestro Admin Interface Class
 */

class MaestroTaskInterfaceInlineFormAPI extends MaestroTaskInterface {
  function __construct($task_id=0, $template_id=0) {
    $this->_task_type = 'InlineFormAPI';
    $this->_is_interactive = MaestroInteractiveFlag::IS_INTERACTIVE;

    parent::__construct($task_id, $template_id);

    $this->_task_edit_tabs = array('assignment' => 1, 'notification' => 1);
  }

  function display() {
    return theme('maestro_task_inline_form_api', array('tdid' => $this->_task_id, 'taskname' => $this->_taskname, 'ti' => $this));
  }

  function getEditFormContent() {
    $this->_fetchTaskInformation();
    if (!is_array(@($this->_task_data->task_data)) || !array_key_exists('form_api_code', $this->_task_data->task_data)) {
      $this->_task_data->task_data['form_api_code'] = '';
    }

    return theme('maestro_task_inline_form_api_edit', array('tdid' => $this->_task_id, 'td_rec' => $this->_task_data));
  }

  function save() {
    $rec = new stdClass();
    $rec->id = $_POST['template_data_id'];
    $rec->task_data = serialize(array('form_api_code' => $_POST['form_api_code'], 'content_type' => $_POST['content_type']));

    drupal_write_record('maestro_template_data', $rec, array('id'));

    return parent::save();
  }
}

?>
