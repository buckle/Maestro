<?php
// $Id:

/**
 * @file
 * maestro_content_publish.module
 */



/* Maestro HOOK to modules to return info on any new task handlers - ie functions for tasks */
function maestro_content_publish_maestro_handler_options() {

  $handlers = array(
    'MaestroTaskTypeInteractiveFunction' => array(
      'maestro_reviewContentType' => t('Generic Function to display a review form with link to content node. Requires that you use a process variables called "content_type" that is set to the content type this function will review.'),
      'maestro_dummy' => t('Test interactive function - do nothing')
      ),
    'MaestroTaskTypeBatchFunction' => array(
      'maestro_publishNode' => t('Publish Node'),
      'maestro_batch_dummy' => t('Test batch function - do nothing'),
      )
    );
    return $handlers;
}


function maestro_reviewContentType($op,&$task,$parms) {
  global $base_url;

  $retval = new stdClass();

  /* Determine the content type to review
   * First check if the task has defined a local variable
   * if not then check for a process variable
   */
  $nid = FALSE;
  if(isset($task->_properties->process_id,$parms['content_type'])) {
      $nid = maestro_getNodeId($task->_properties->process_id,$parms['content_type']);
  }
  if ($nid === FALSE) {
    $maestro = Maestro::createMaestroObject(1);
    $content_type = $maestro->engine()->getProcessVariable('content_type', $task->_properties->process_id);
    $nid = maestro_getNodeId($task->_properties->process_id,$content_type);
  }
  if ($nid === FALSE) {
    $retval->retcode = FALSE;
    return $retval;
  }

  $node = node_load($nid);
  if ($node === FALSE) {
    $retval->retcode = TRUE;
    $retval->html = t('Invalid Node: Content possibly has been deleted.');
    return $retval;
  }

  $retval->html = '';
  $retval->retcode = FALSE;
  $retval->engineop = '';  // Optionally set the engineop value if you want to complete the task

  switch ($op) {
    case 'display':
      $data = $task->getTempData();
      $retval->html = drupal_render(drupal_get_form('maestro_content_publish_review_form',array(
        'nid' => $nid,
        'queue_id' => $task->_properties->queue_id,
        'title' => $node->title,
        'data' => $data)));

      $retval->retcode = TRUE;
      $retval->engineop = '';
      break;
    case 'complete':
      $data = $task->getTempData();
      $tracking_id = maestro_getTaskTrackingId($task->_properties->queue_id);
      if (empty($data['reviewstatus']) AND !isset($_POST['reviewstatus'])) {
        $retval->retcode = FALSE;

      } elseif ($data['reviewstatus'] == 'accept' OR $_POST['reviewstatus'] == 'yes') {
        $data['reviewstatus'] = 'accept';
        $task->saveTempData($data);
        $retval->retcode = TRUE;
        $retval->status = MaestroTaskStatusCodes::STATUS_COMPLETE;
        $retval->engineop = 'completetask';
        // Flag the content record as accepted
        db_update('maestro_project_content')
          ->fields(array( 'status' => MaestroContentStatusCodes::STATUS_UNDER_REVIEW))
          ->condition('tracking_id', $tracking_id)
          ->condition('nid', $nid)
          ->execute();

      } elseif ($data['reviewstatus'] == 'reject' OR $_POST['reviewstatus'] == 'no') {
        $data['reviewstatus'] = 'reject';
        $task->saveTempData($data);
        $retval->retcode = TRUE;
        $retval->status = MaestroTaskStatusCodes::STATUS_IF_CONDITION_FALSE;
        $retval->engineop = 'completetask';
        // Flag the content record as rejected
        db_update('maestro_project_content')
          ->fields(array( 'status' => MaestroContentStatusCodes::STATUS_REJECTED))
          ->condition('tracking_id', $tracking_id)
          ->condition('nid', $nid)
          ->execute();

      } else {
        $retval->retcode = FALSE;
      }
      break;
    case 'update':
      if($_POST['reviewstatus'] == 'yes') {
        $data['reviewstatus'] = 'accept';
        $task->saveTempData($data);
      } elseif ($_POST['reviewstatus'] == 'no') {
        $data['reviewstatus'] = 'reject';
        $task->saveTempData($data);
      }
      $retval->retcode = TRUE;
      break;
  }

  return $retval;

}


function maestro_content_publish_review_form($form, $form_state, $parms) {

  if ($parms['data']['reviewstatus'] == 'accept') {
    $default_value = 'yes';
  } elseif($parms['data']['reviewstatus'] == 'reject') {
    $default_value = 'no';
  } else {
    $default_value = '';
  }

  $node = node_load($parms['nid']);
  if ($node !== FALSE) {
    $edit_content_link = l($node->title, "node/{$parms['nid']}/edit/maestro/edit/{$parms['queue_id']}");
  } else {
    $edit_content_link = '';
  }

  $query = db_select('node_revision', 'a');
  $query->addField('a','vid');
  $query->condition('a.nid', $node->nid, '=');
  $query->orderBy('a.vid', 'ASC');
  $res = $query->execute();
  $revision_count = 0;
  foreach ($res as $rec) {
    $revision_count++;
    if ($rec->vid == $node->vid) {
        $current_revision = $revision_count;
    }
  }

  $current_node_status = t("%status - Revision %current_revision of %revision_count revisions", array(
    '%status' => ($node->status) ? "Published" : "Unpublished",
    '%current_revision' => $current_revision,
    '%revision_count' => $revision_count));

  $form = array();
  $form['review_item'] = array(
    '#markup' =>  t('You have a task to Review and Edit the following content') . '<span style="padding-left:5px;">' . $edit_content_link . '</span><div>' . t('Current Status: ') . $current_node_status . '</div>',
  );


  $form['reviewstatus'] = array(
    '#type' => 'radios',
    '#title' => t('Do you accept this document'),
    '#options' => array('yes' => t('Yes'), 'no' => t('No')),
    '#default_value' => $default_value,
  );

  $form['actions']['complete_task'] = array(
    '#type' => 'button',
    '#default_value' => t('Complete Task'),
    '#attributes' => array('maestro' => array('complete')),
  );
  $form['actions']['update_task'] = array(
    '#type' => 'button',
    '#default_value' => t('Update'),
    '#attributes' => array('maestro' => array('update')),
  );

  return $form;

}

/* Batch function called to publish node
   If revisioning in enabled, then it will publish the latest revision
   Future version could prompt the moderator for which version to publish
*/
function maestro_publishNode($queue_id, $process_id) {

  $maestro = Maestro::createMaestroObject(1);
  $content_type = $maestro->engine()->getProcessVariable('content_type', $process_id);
  $nid = maestro_getNodeId($process_id,$content_type);
  if ($nid > 0) {
    $node = node_load($nid);
    if (module_exists('revisioning')) {
      // Only support presently to publish the last revision
      $latest_vid = revisioning_get_latest_revision_id($nid);
      $last_node_revision = node_load($nid, $latest_vid);
      _revisioning_publish_revision($last_node_revision);
    } else {
      $node->status = NODE_PUBLISHED;
      node_save($node);
    }
    drupal_set_message("New {$content_type} has been published");
    return TRUE;
  } else {
    return FALSE;
  }
}



