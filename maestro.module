<?php
// $Id$

/**
 * @file
 * maestro.module
 */

include_once './' . drupal_get_path('module', 'maestro') . '/maestro.class.php';
include_once './' . drupal_get_path('module', 'maestro') . '/maestro_tasks.class.php';

function maestro_menu() {
  $items = array();

  $items['maestro/taskconsole'] = array(
    'title' => 'Task Console',
    'page callback' => 'maestro_taskconsole',
    'access callback' => 'user_access',
    'access arguments' => array('maestro taskconsole'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['maestro/cleanqueue'] = array(
    'title' => 'Maestro CleanQueue',
    'page callback' => 'maestro_cleanqueue',
    'access callback' => TRUE,
  );

  $items['maestro/test'] = array(
    'title' => 'Maestro Test Workflow',
    'page callback' => 'maestro_enginetest',
    'access callback' => TRUE,
  );

  $items['admin/structure/maestro'] = array(
    'title' => 'Maestro Workflows',
    'description' => 'Define and administer workflows.',
    'page callback' => 'maestro_admin',
    'access arguments' => array('maestro admin'),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'maestro.admin.inc'
    );

    $items['maestro/taskconsole/ajax'] = array(
    'page callback' => 'maestro_handle_taskconsole_ajax_request',
    'page arguments' => array(3, 4) ,      // Passing in wildcard which should be parm 1
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro user')
    );

    $items['admin/structure/maestro/ajax'] = array(
    'page callback' => 'maestro_handle_editor_ajax_request',
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.admin.inc'
    );

    $items['admin/structure/maestro/structure_ajax'] = array(
    'page callback' => 'maestro_handle_structure_ajax_request',
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.admin.inc'
    );

    $items['admin/structure/maestro/new'] = array(
    'title' => 'New',
    'type' => MENU_LOCAL_TASK,
    );

    $items['admin/structure/maestro/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'maestro_edit_workflow',
    'access arguments' => array('maestro admin'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'maestro.admin.inc'
    );

    $items['admin/structure/maestro/edit_properties'] = array(
    'title' => 'Edit Template Name and Variables',
    'page callback' => 'maestro_edit_properties',
    'access arguments' => array('maestro admin'),
    'type' => MENU_CALLBACK,
    'file' => 'maestro.admin.inc'
    );

    $items['maestro_enginetest'] = array(
    'title' => 'Execute Development Test',
    'page callback' => 'maestro_enginetest',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file'  => 'lib-test.php',
    );

    $items['maestro_runengine'] = array(
    'title' => 'Execute Development Test',
    'page callback' => 'maestro_runengine',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file'  => 'lib-test.php',
    );

    $items['admin/config/workflow/maestro_configure'] = array(
    'title' => 'Maestro Config',
    'description' => 'Configure the Maestro Engine.',
    'page callback' => 'maestro_configure',
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.admin.inc'
    );

    $items['maestro_manual_web_example'] = array(
    'title' => 'Maestro Manual Web Example',
    'description' => 'Manual Web example.',
    'page callback' => 'maestro_manual_web_example',
    'access arguments' => array('maestro user'),
    'type' => MENU_CALLBACK,
    );

    return $items;
}


function maestro_permission() {
  return array(
    'maestro taskconsole'  => array(
      'title' => t('Access Maestro Task Console')
  ),
    'maestro admin' => array(
      'title' => t('Administer Maestro workflows')
  )
  );
}

function maestro_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#maestro":
      $output = '<p>' . t("Define and administer workflows.") .'</p>';
      break;
  }
  return $output;
}

function maestro_theme() {
  return array(
    'maestro_taskconsole' => array(
      'template' => 'theme/maestro-taskconsole',
      'variables' => array('tasks' => NULL),
    ),
    'maestro_workflow_list' => array(
      'template' => 'theme/structure/maestro-workflow-list',
      'variables' => array('tid' => NULL, 'operation' => NULL, 'edit_var' => 0)
    ),
    'maestro_workflow_list_item' => array(
      'template' => 'theme/structure/maestro-workflow-list-item',
      'variables' => array('rec' => NULL, 'cntr' => NULL, 'tid' => NULL, 'operation' => NULL, 'edit_var' => 0)
    ),
    'maestro_workflow_edit_template_variables_list' => array(
      'template' => 'theme/structure/maestro-workflow-edit-template-variables-list',
      'variables' => array('id' => NULL, 'tid' => NULL, 'variable_name' => NULL, 'variable_name' => NULL, 'edit_var' => 0, 'cntr' => 0)
    ),

    'maestro_workflow_edit_template_variables' => array(
      'template' => 'theme/structure/maestro-workflow-edit-template-variables',
      'variables' => array('tid' => NULL, 'edit_var' => 0, 'cntr' => 0)
    ),

    'maestro_workflow_task_frame' => array(
      'template' => 'theme/structure/maestro-workflow-task-frame',
      'variables' => array('rec' => NULL, 'ti' => NULL, 'task_class' => NULL)
    ),
    'maestro_workflow_edit' => array(
      'template' => 'theme/structure/maestro-workflow-edit',
      'variables' => array('tid' => NULL, 'mi' => NULL, 'maestro_url' => NULL, 't_rec' => NULL)
    ),
    'maestro_workflow_edit_tasks_frame' => array(
      'template' => 'theme/structure/maestro-workflow-edit-tasks-frame',
      'variables' => array('tdid' => NULL, 'tid' => NULL, 'form_content' => NULL, 'maestro_url' => NULL, 'pv_options' => NULL, 'uid_options' => NULL, 'task_class' => NULL, 'vars' => NULL, 'task_edit_tabs' => NULL, 'optional_parms' => NULL)
    ),
    'maestro_task_start' => array(
      'template' => 'theme/structure/tasks/maestro-task-start',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_end' => array(
      'template' => 'theme/structure/tasks/maestro-task-end',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_if' => array(
      'template' => 'theme/structure/tasks/maestro-task-if',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_batch' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_batch_function' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch-function',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_set_process_variable' => array(
      'template' => 'theme/structure/tasks/maestro-task-set-process-variable',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_interactive_function' => array(
      'template' => 'theme/structure/tasks/maestro-task-interactive-function',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_interactive_function_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-interactive-function-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL)
    ),
    'maestro_task_set_process_variable_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-set-process-variable-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL, 'pvars' => NULL)
    ),
    'maestro_task_batch_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL)
    ),
    'maestro_task_batch_function_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch-function-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL)
    ),
    'maestro_task_if_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-if-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL)
    ),
    'maestro_task_and' => array(
      'template' => 'theme/structure/tasks/maestro-task-and',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_manual_web' => array(
      'template' => 'theme/structure/tasks/maestro-task-manual-web',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_manual_web_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-manual-web-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL)
    ),
    'maestro_manual_web_example' => array(
      'template' => 'theme/examples/maestro-manual-web-example',
      'variables' => array('queue_id' => 0)
    ),
    'maestro_task_content_type' => array(
      'template' => 'theme/structure/tasks/maestro-task-content-type',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_content_type_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-content-type-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'ta_rec' => NULL, 'content_types' => NULL)
    ),
  );
}


/**
 * Display of the Task Console - called from hook_menu callback.
 */
function maestro_taskconsole() {
  global $base_url, $base_path, $user;
  $maestro_path = $base_url . '/' . drupal_get_path('module', 'maestro');
  drupal_add_css($maestro_path . '/css/maestro.css');
  $modulepath = drupal_get_path('module', 'maestro');
  drupal_set_breadcrumb('');
  return theme('maestro_taskconsole');
}


function maestro_cleanqueue() {
  global $base_url;
  $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
  $maestro->engine()->cleanQueue();
  $maestro->engine()->setProcessVariable('initiator',1);
  drupal_set_message("Maestro Clean Queue Completed");
  drupal_goto($base_url);
}

function maestro_enginetest() {
  global $base_url;
  $options = array('color1' => 'red');    // Example array for options - structure TBD.
  $maestro = Maestro::createMaestroObject(1,$options);    // Initiate the processing of all tasks of type 1.x
  $template = 1;
  $newprocess = $maestro->engine()->newProcess($template);

  $maestro->engine()->setDebug(TRUE);
  $var = $maestro->engine()->getProcessVariable('var1');

  if ($newprocess > 0) {
    drupal_set_message("New Process Code Success! - Process ID: $newprocess");
  } else {
    drupal_set_message("New Process Code FAIL! - Template: $template not defined");
  }
  drupal_goto($base_url);
}

function template_preprocess_maestro_taskconsole(&$variables) {
  global $base_url;

  $variables['ajax_server_url'] = url('maestro/taskconsole/ajax');
  $maestro_path = $base_url . '/' . drupal_get_path('module', 'maestro');
  $variables['module_base_url'] = $maestro_path;
  $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
  $objtasks = $maestro->engine()->getQueue();
  $variables['taskcount'] = $maestro->engine()->getUserTaskCount();
  $variables['formatted_tasks'] = array();
  if (is_array($objtasks) AND count($objtasks) > 0) {
    foreach ($objtasks as $task) {
      $formatted_task = $task;
      $formatted_task->class_newtask = 'maestroNewTask';
      $formatted_task->hidetaskinfo = 'none';
      $formatted_task->onholdnotice = '';
      $formatted_task->task_onclick = 'onclick="alert(\'Task Type:  ' . $task->tasktype . '\');"';
      $formatted_task->task_action_url = '#';  //we let the interactive tasks override this later if need be.

      if ($task->dates['started'] > 0) {
        $formatted_task->task_started = ', Started: ' . format_date($task->dates['started'],'short');
        $formatted_task->task_icon = $maestro_path . '/images/taskconsole/task.gif';
      } else {
        $formatted_task->task_started = '';
        $formatted_task->task_icon = $maestro_path . '/images/taskconsole/new_task.gif';
      }
      $formatted_task->assigned_shortdate = format_date($task->dates['created'],'custom','m/d/y');
      $formatted_task->assigned_longdate = format_date($task->dates['created'],'medium');
      $formatted_task->project_details = '';
      $formatted_task->hold = '';
      $formatted_task->view = '';
      $formatted_task->edit = '';
      $formatted_task->delete = '';

      if ($task->flags['is_interactive'] == 1) {
        $current_task = new $task->tasktype($task);  //fire up the engine task here to let us re-use its methods to create task console output.
        $formatted_task->task_action_url = $current_task->getTaskConsoleURL();  //here is where we override the action url.
        $action_record = $maestro->engine()->showInteractiveTask($current_task,$task->queue_id);
        if ($action_record === FALSE OR empty($action_record)) {
          $formatted_task->action_record = '';
        } else {
          $formatted_task->action_record = $action_record;
        }
      } else {
        $formatted_task->action_record = '';
      }

      // Show the extra task detail 'onhover info' if this is a project related task
      $formatted_task->showmoretaskdetail = 'none';
      $formatted_task->description = 'yada yada';
      $formatted_task->comment_note = 'yada yada';

      $variables['formatted_tasks'][] = $formatted_task;

    }
    $variables['details_icon'] = '<img src="' . $maestro_path . '/images/taskconsole/details.png' . '">';

  }

}



function template_preprocess_maestro_workflow_edit(&$variables) {
  global $base_url;
  $mi = new MaestroInterface($variables['tid']);

  $variables['additional_js'] = $mi->initializeJavascriptArrays();
  $variables['ajax_url'] = url('admin/structure/maestro/ajax/');
}

function template_preprocess_maestro_workflow_list(&$variables) {
  $query = db_select('maestro_template', 'a');
  $query->addExpression('COUNT(a.id)','templateCount');
  $queryNumRows = $query->countQuery()->execute()->fetchField();
  $variables['num_records'] = intval($queryNumRows);
  $output="";

  $res = db_query("SELECT id, template_name FROM {maestro_template}");
  $cntr=0;
  foreach ($res as $rec) {

    $output .= theme('maestro_workflow_list_item', array( 'rec' => $rec,
                                                          'cntr' => $cntr,
                                                          'operation' => $variables['operation'],
                                                          'tid' => $variables['tid'],
                                                          'edit_var' => $variables['edit_var']
    ));
    $cntr++;
  }

  $variables['workflow_list'] = $output;

  $variables['error_message'] = '';
  $variables['ajax_url']=url('admin/structure/maestro/structure_ajax');

  //app group listing:
  $variables['app_groups'] = maestro_createAppGroupDropDown('deleteAppGroup');

}

function template_preprocess_maestro_workflow_list_item(&$variables) {
  global $base_url;
  $output="";

  $variables['module_path']=$base_url . "/" . drupal_get_path('module', 'maestro');
  $variables['use_project'] = "";
  if(  $variables['operation'] == 'edit' && $variables['tid'] ==  $variables['rec']->id ) {  //only show this when we're editing a specific template.
    $variables['show_item'] = '';
    $output=theme('maestro_workflow_edit_template_variables',  array('tid' => $variables['tid'], 'edit_var' => $variables['edit_var'] , 'cntr' => $variables['cntr']));
    $query = db_select('maestro_template', 'a');
    $query->fields('a',array('template_name','use_project','app_group'));
    $query->condition('a.id',$variables['tid'],'=');
    $res=current($query->execute()->fetchAll());
    if($res) {
      if($res->use_project == 1)  $variables['use_project'] = ' checked="true" ';
    }
    $variables['template_app_groups'] = maestro_createAppGroupDropDown('appGroup', $res->app_group);
  }
  else {
    $variables['show_item'] = 'none';
    $variables['template_app_groups'] = "";
  }
  $variables['template_variables'] = $output;


}



function template_preprocess_maestro_workflow_edit_template_variables(&$variables) {
  global $base_url;
  $variables['module_path']=$base_url . "/" . drupal_get_path('module', 'maestro');
  $output="";
  $res = db_query("SELECT id, variable_name, variable_value FROM {maestro_template_variables} WHERE template_id=:tid", array('tid' => $variables['tid']));
  foreach ($res as $rec) {
    $output .= theme('maestro_workflow_edit_template_variables_list', array( 'var_id' => $rec->id,
                                                                        'tid' => $variables['tid'],
                                                                        'variable_name' => $rec->variable_name,
                                                                        'variable_value' => $rec->variable_value,
                                                                        'edit_var' => $variables['edit_var'],
                                                                        'cntr' => $variables['cntr']
    ));
  }
  $variables['template_variables'] = $output;
}

function template_preprocess_maestro_workflow_edit_template_variables_list(&$variables) {
  global $base_url;
  $variables['module_path' ] = $base_url . "/" . drupal_get_path('module', 'maestro');
  if($variables['var_id'] == $variables['edit_var']) {
    $variables['show_variable_actions'] = 'none';
    $variables['show_variable_edit_actions'] = '';
  }
  else {
    $variables['show_variable_actions'] = '';
    $variables['show_variable_edit_actions'] = 'none';
  }


}


function maestro_createAppGroupDropDown($name, $selected = 0){
  $res = db_query("SELECT id, app_group FROM {maestro_app_groups}");
  $output = "<select class='form-select' id='{$name}' name='{$name}' size='4' style='width:150px;'>";
  $output .= "<option value='0'>" . t('N/A') . "</option>";
  foreach ($res as $rec) {
    $sel = "";
    if($selected == $rec->id) $sel = " selected ";
    $output .= "<option value='{$rec->id}' {$sel}>{$rec->app_group}</option>";
  }
  $output .= "</select>";
  return $output;
}

function maestro_maestro_context_menu() {
  $options = array(
    array('display_name' => 'And Task',
      'class_name' => 'MaestroTaskInterfaceAnd',
      'file_location' => ''
    ),
    array('display_name' => 'If Task',
      'class_name' => 'MaestroTaskInterfaceIf',
      'file_location' => ''
    ),
    array('display_name' => 'Batch Task',
      'class_name' => 'MaestroTaskInterfaceBatch',
      'file_location' => ''
    ),
    array('display_name' => 'Batch Function Task',
      'class_name' => 'MaestroTaskInterfaceBatchFunction',
      'file_location' => ''
    ),
    array('display_name' => 'Interactive Function Task',
      'class_name' => 'MaestroTaskInterfaceInteractiveFunction',
      'file_location' => ''
    ),
    array('display_name' => 'Set Process Variable Task',
      'class_name' => 'MaestroTaskInterfaceSetProcessVariable',
      'file_location' => ''
    ),
    array('display_name' => 'Manual Web Task',
      'class_name' => 'MaestroTaskInterfaceManualWeb',
      'file_location' => ''
    ),
    array('display_name' => 'Content Type Task',
      'class_name' => 'MaestroTaskInterfaceContentType',
      'file_location' => ''
    ),
  );
  return $options;
}


function maestro_handle_taskconsole_ajax_request($action, $queue_id = 0) {
  switch ($action) {
    case 'starttask':
      $startedDate = db_query("SELECT started_date FROM {maestro_queue} WHERE id = :tid",
        array(':tid' => $_POST['taskid']))->fetchField();
      if ($startedDate == NULL or $startedDate <= 0) {
        db_update('maestro_queue')
          ->fields(array('started_date' => time()))
          ->condition('id', $_POST['taskid'], '=')
          ->execute();
      }
      break;

    case 'interactivetask_post':
      $queue_id = intval($_POST['queueid']);
      $taskop = CHECK_PLAIN($_POST['op']);
      if ($queue_id > 0) {
        $tasktype = db_query("SELECT task_class_name FROM {maestro_queue} WHERE id = :tid",
          array(':tid' => $queue_id))->fetchField();

        $data = new stdClass();
        // Need to pass in data object when instantiating task class and queueid needs to be set in class _properties.
        $data->queue_id = $queue_id;
        $task = new $tasktype($data);
        $ret = $task->processInteractiveTask($queue_id,$taskop);
        if ($ret->retcode === TRUE) {
          if ($ret->engineop == 'completetask') {
            $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
            $maestro->engine()->completeTask($queue_id);
            $retdata = array('status' => TRUE, 'hidetask' => TRUE);
          } else {
            $retdata = array('status' => TRUE, 'hidetask' => FALSE);
          }
        } else{
            $retdata = array('status' => FALSE, 'hidetask' => FALSE);
        }
      } else {
        $retdata = array('status' => FALSE, 'hidetask' => FALSE);
      }
      echo json_encode($retdata);
      break;

    case 'complete_task':
      //We require the queueID to be passed back to us in the URL
      $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
      $queue_id = intval($queue_id);
      $maestro->engine()->completeTask($queue_id);
      $retdata = array ('status' => "1");
      echo json_encode($retdata);
      break;
  }
}
/**
 * Implements hook_admin_paths().
 */
function maestro_admin_paths() {
  $paths = array(
    'node/add/*/maestro' => TRUE,
    'node/*/edit/maestro/*' => TRUE,
  );
  return $paths;
}

function maestro_form_alter(&$form, $form_state, $form_id) {

  /* Need a better way to register forms that can be under maestro control */
  if ($form_id == 'change_request_node_form') {
    $request = request_uri();
    $requestParms = explode('/',$request);
    if (isset($requestParms[5]) AND $requestParms[5] == 'maestro' AND intval($requestParms[6]) > 0) {
        $form['maestro_taskdata'] = array(
          '#title'  => t('New Field'),
          '#type'   => 'textfield',
          '#description'  => 'Testing the hook_form_alter'
        );
        $form['maestro_taskid'] = array(
          '#value'  => intval($requestParms[6]),
          '#type'   => 'hidden',
        );
    }
  }

}

function maestro_node_insert($node) {
  if ($node->maestro_taskid > 0) {
    $data = serialize(array('maestro_taskdata' => $node->maestro_taskdata));
    db_insert('maestro_project_data_results')
    ->fields(array(
        'nid' => $node->nid,
        'project_id' => 0,
        'task_id' => $node->maestro_taskid,
        'task_data' => $data,
    ))
    ->execute();
  }
}

function maestro_node_load($nodes, $form) {
  foreach ($nodes as $node) {
    /* Check if there is a corresponding node record in the maestro_project_results_data table
     * Retrieve the taskid (queueid) and any required data
    */
  }
}

function maestro_manual_web_example(){
  global $base_url;
  $maestro_path = $base_url . '/' . drupal_get_path('module', 'maestro');
  drupal_add_css($maestro_path . '/css/maestro.css');
  $queue_id=check_plain($_GET['queueid']);
  return theme('maestro_manual_web_example', array('queue_id' => $queue_id));
}