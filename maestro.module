<?php
// $Id$

/**
 * @file
 * maestro.module
 */

include_once './' . drupal_get_path('module', 'maestro') . '/maestro.class.php';
include_once './' . drupal_get_path('module', 'maestro') . '/maestro_tasks.class.php'; 
 
function maestro_menu() {
  $items = array();
  
  $items['maestro/cleanqueue'] = array(
    'title' => 'Maestro CleanQueue',
    'page callback' => 'maestro_cleanqueue',
    'access callback' => TRUE,
  );  

  $items['maestro/test'] = array(
    'title' => 'Maestro Test Workflow',
    'page callback' => 'maestro_enginetest',
    'access callback' => TRUE,
  );  
    
  $items['admin/structure/maestro'] = array(
    'title' => 'Maestro Workflows',
    'description' => 'Define and administer workflows.',
    'page callback' => 'maestro_admin',
    'access arguments' => array('administer maestro'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'maestro.admin.inc'
  );

  $items['admin/structure/maestro/new'] = array(
    'title' => 'New',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/maestro/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'maestro_edit_workflow',
    'access arguments' => array('administer maestro'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'maestro.admin.inc'
  );

  $items['maestro_enginetest'] = array(
    'title' => 'Execute Development Test',
    'page callback' => 'maestro_enginetest',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file'  => 'lib-test.php',
  );

  $items['maestro_runengine'] = array(
    'title' => 'Execute Development Test',
    'page callback' => 'maestro_runengine',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file'  => 'lib-test.php',
  );  
  
  return $items;
}

function maestro_permission() {
  return array(
    'administer maestro' => array(
      'title' => t('Administer Maestro workflows')
    )
  );
}

function maestro_help($path, $arg) {
  $output = '';

  switch ($path) {
  case "admin/help#maestro":
    $output = '<p>' . t("Define and administer workflows.") .'</p>';
    break;
  }
  return $output;
}

function maestro_theme() {
  return array(
    'maestro_workflow_list' => array(
      'template' => 'theme/maestro-workflow-list',
      'render element' => 'structure'
    ),
    'maestro_workflow_list_item' => array(
      'template' => 'theme/maestro-workflow-list-item',
      'render element' => 'structure'
    ),
    'maestro_workflow_edit' => array(
      'template' => 'theme/maestro-workflow-edit',
      'render element' => 'structure'
    ),
  );
}


function maestro_cleanqueue() {
  global $base_url;
  $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
  $maestro->engine()->cleanQueue()->nextStep();
  drupal_set_message("Maestro Clean Queue Completed");
  drupal_goto($base_url);
}

function maestro_enginetest() {
  global $base_url;
  $options = array('color1' => 'red');    // Example array for options - structure TBD.
  $maestro = Maestro::createMaestroObject(1,$options);    // Initiate the processing of all tasks of type 1.x
  $template = 1;
  $newprocess = $maestro->engine()->newProcess($template);
  if ($newprocess > 0) {
    drupal_set_message("New Process Code Success! - Process ID: $newprocess");
  } else {
    drupal_set_message("New Process Code FAIL! - Template: $template not defined");
  }
  drupal_goto($base_url);
}
